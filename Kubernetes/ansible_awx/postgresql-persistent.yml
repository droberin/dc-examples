apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  name: ansible-awx-postgresql
  labels:
    app: ansible-awx
    app-component: ansible-awx-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app-component: ansible-awx-postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: ansible-awx-postgresql
        app: ansible-awx
        app-component: ansible-awx-postgresql
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: postgresql-secret
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: postgresql-secret
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: postgresql-secret
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: postgresql-secret
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: "100"
        image: registry.access.redhat.com/rhscl/postgresql-96-rhel7
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
          timeoutSeconds: 1
        name: postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d template1
              -c 'SELECT 1'
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: 512Mi
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: postgresql-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: postgresql-data
        emptyDir: {}
status: {}
